version: "3"
services:
  server1:
    build:
      context: ./build
    restart: always
    container_name: server1
    hostname: server1
    environment:
      MYSQL_DATABASE: 'db'
      # So you don't have to use root, but you can if you like
      MYSQL_USER: 'user'
      # You can use whatever password you like
      MYSQL_PASSWORD: 'password'
      # Password for root access
      MYSQL_ROOT_PASSWORD: 'password'
      conf.ssl_ca: '/certs/ca.pem'
      conf.ssl_cert: '/certs/server-cert.pem'
      conf.ssl_key: '/certs/server-key.pem'
      conf.require_secure_transport: 'ON'
      conf.server-id: '1'
      #conf.default-authentication-plugin: 'mysql_native_password'
      conf.datadir: '/var/lib/mysql'
      conf.log-bin: 'mysql-bin'
      conf.log-slave-updates: '1'
      conf.relay-log: 'server1-relay-bin'
      conf.innodb_flush_log_at_trx_commit: '1'
      conf.innodb_flush_method: 'O_DIRECT'
      conf.innodb_buffer_pool_size: '2G'
      conf.innodb_log_file_size: '128M'
      conf.auto_increment_increment: '2'
      conf.auto_increment_offset: '1'
      conf.skip-host-cache: 'true'
      conf.skip-name-resolve: 'true'

    ports:
      # <Port exposed> : < MySQL Port running inside container>
      - '3301:3306'
    expose:
      # Opens port 3306 on the container
      - '3306'
      # Where our data will be persisted
    volumes:
      - ./build/certs/ca.pem:/certs/ca.pem
      - ./build/certs/server-cert.pem:/certs/server-cert.pem
      - ./build/certs/server-key.pem:/certs/server-key.pem
  server2:
    build:
      context: ./build
    restart: always
    container_name: server2
    hostname: server2   
    environment:
      MYSQL_DATABASE: 'db'
      # So you don't have to use root, but you can if you like
      MYSQL_USER: 'user'
      # You can use whatever password you like
      MYSQL_PASSWORD: 'password'
      # Password for root access
      MYSQL_ROOT_PASSWORD: 'password'
      conf.ssl_ca: '/certs/ca.pem'
      conf.ssl_cert: '/certs/server-cert.pem'
      conf.ssl_key: '/certs/server-key.pem'
      conf.require_secure_transport: 'ON'
      conf.server-id: '2'
      #conf.default-authentication-plugin: 'mysql_native_password'
      conf.datadir: '/var/lib/mysql'
      conf.log-bin: 'mysql-bin'
      conf.log-slave-updates: '1'
      conf.relay-log: 'server2-relay-bin'
      conf.innodb_flush_log_at_trx_commit: '1'
      conf.innodb_flush_method: 'O_DIRECT'
      conf.innodb_buffer_pool_size: '2G'
      conf.innodb_log_file_size: '128M'
      conf.auto_increment_increment: '2'
      conf.auto_increment_offset: '1'
      conf.skip-host-cache: 'true'
      conf.skip-name-resolve: 'true'
    ports:
      # <Port exposed> : < MySQL Port running inside container>
      - '3302:3306'
    expose:
      # Opens port 3306 on the container
      - '3306'
      # Where our data will be persisted
    volumes:
      - ./build/certs/ca.pem:/certs/ca.pem
      - ./build/certs/server-cert.pem:/certs/server-cert.pem
      - ./build/certs/server-key.pem:/certs/server-key.pem
  replicator:
    build:
      context: ./build
    environment:
      MYSQL_DATABASE: 'db'
      # So you don't have to use root, but you can if you like
      MYSQL_USER: 'user'
      # You can use whatever password you like
      MYSQL_PASSWORD: 'password'
      # Password for root access
      MYSQL_ROOT_PASSWORD: 'password'
      SSL_CA: '/certs/ca.pem'
      SSL_CERT: '/certs/server-cert.pem'
      SSL_KEY: '/certs/server-key.pem'
      MYSQL_REPLICATION_USER: "replicator"
      MYSQL_REPLICATION_PASSWORD: password
      MODE: "setup_duplication"
      SERVER_1: "server1"
      SERVER_2: "server2"
    ports:
      # <Port exposed> : < MySQL Port running inside container>
      - '3303:3306'
    depends_on:
      - "server1"
      - "server2"  
    expose:
      # Opens port 3306 on the container
      - '3306'
      # Where our data will be persisted
    volumes:
      - ./build/certs/ca.pem:/certs/ca.pem
      - ./build/certs/server-cert.pem:/certs/server-cert.pem
      - ./build/certs/server-key.pem:/certs/server-key.pem      